    /* Variables de semaforo */
        sem_t * key_sem;

    /* attach to the segment to get a pointer to it: */
    data = shmat(shm_id, NULL, 0);
    if (data == (char *)(-1)) {
        perror("shmat");
        exit(1);
    }

    /* after getting the pointer, create the semaphore */
    /* Create a semaphore in locked state */
    key_sem = sem_open(KEY_SEM_NAME, O_CREAT, 0644, 0);

    if(key_sem == (void*)-1){
        perror("sem_open failure");
        exit(1);
    }

    /* Access to the shared memory area */
    /* read or modify the segment, based on the command line: */
    printf("writing to segment: \"%s\"\n", "xdd");
    strncpy(data, "xdd", SHM_SIZE);
    printf("segment contains: \"%s\"\n Enter para liberar semaphore \n", data);

    getchar();
    /* Release the semaphore lock */
    sem_post(key_sem);

    /* detach from the segment: */
    if (shmdt(data) == -1) {
        perror("shmdt");
        exit(1);
    }

    /* close semaphore */

    sem_close(key_sem);
    getchar();

    if ((shmctl (shm_id, IPC_RMID, (struct shmid_ds *) 0)) == -1)
    {
        perror ("shmctl");
        exit (-1);
    }